<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>WinExe</OutputType>
        <TargetFramework>net7.0</TargetFramework>
        <Nullable>enable</Nullable>
        <!--Avalonia doesen't support TrimMode=link currently,but we are working on that https://github.com/AvaloniaUI/Avalonia/issues/6892 -->
        <TrimMode>copyused</TrimMode>
        <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>11</LangVersion>
    </PropertyGroup>
    <ItemGroup>
        <AvaloniaResource Include="Assets\**" />
        <None Remove=".gitignore" />
    </ItemGroup>
    <ItemGroup>
        <!--This helps with theme dll-s trimming.
        If you will publish your application in self-contained mode with p:PublishTrimmed=true and it will use Fluent theme Default theme will be trimmed from the output and vice versa.
        https://github.com/AvaloniaUI/Avalonia/issues/5593 -->
        <TrimmableAssembly Include="Avalonia.Themes.Fluent" />
        <TrimmableAssembly Include="Avalonia.Themes.Default" />
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="Avalonia" Version="0.10.18" />
        <PackageReference Include="Avalonia.Desktop" Version="0.10.18" />
        <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
        <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="0.10.18" />
        <PackageReference Include="Silk.NET.OpenGL" Version="2.16.0" />
        <PackageReference Include="Silk.NET.SDL" Version="2.16.0" />
        <PackageReference Include="XamlNameReferenceGenerator" Version="1.3.4" />
    </ItemGroup>
    <ItemGroup>
        <ProjectReference Include="..\..\M64RPFW.Services\M64RPFW.Services\M64RPFW.Services.csproj" />
        <ProjectReference Include="..\..\M64RPFW.ViewModels\M64RPFW.ViewModels\M64RPFW.ViewModels.csproj" />
        <ProjectReference Include="..\M64RPFW.Services\M64RPFW.Services\M64RPFW.Services.csproj" />
        <ProjectReference Include="..\M64RPFW.ViewModels\M64RPFW.ViewModels\M64RPFW.ViewModels.csproj" />
    </ItemGroup>

    <PropertyGroup>
        <!-- For Microsoft.CodeAnalysis -->
        <SatelliteResourceLanguages>en</SatelliteResourceLanguages>
        <ApplicationManifest>app.manifest</ApplicationManifest>
    </PropertyGroup>

    <!--======================================
    TARGETS USED FOR COPYING OS-SPECIFIC FILES
    =======================================-->
    <PropertyGroup>
        <OSLibraryDir Condition="$([MSBuild]::IsOSPlatform('Linux'))">Linux</OSLibraryDir>
        <OSLibraryDir Condition="$([MSBuild]::IsOSPlatform('Windows'))">Windows</OSLibraryDir>
        <!-- In case we ever bother... -->
        <OSLibraryDir Condition="$([MSBuild]::IsOSPlatform('OSX'))">MacOS</OSLibraryDir>
    </PropertyGroup>

    <Target Name="CopyCustomLibraries" AfterTargets="AfterBuild">
        <ItemGroup>
            <LibraryList Include="Libraries\$(OSLibraryDir)\*.*" />
        </ItemGroup>
        <Message Importance="high" Text="Library list: @(LibraryList)" />
        <Copy SourceFiles="@(LibraryList)" DestinationFolder="$(OutDir)/Libraries" />
    </Target>

    <Target Name="CopyCustomLibrariesPublish" AfterTargets="AfterPublish">
        <ItemGroup>
            <LibraryList Include="Libraries\$(OSLibraryDir)\*.*" />
        </ItemGroup>
        <Copy SourceFiles="@(LibraryList)" DestinationFolder="$(PublishDir)/Libraries" />
    </Target>
</Project>
